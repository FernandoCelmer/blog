{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"10 de Julho, 2022 - SCRIPT PARA DEPLOY AWS LAMBDA 02 de Mar\u00e7o, 2022 - APP PYTHON/DJANGO + MYSQL 01 de Mar\u00e7o, 2022 - INTRODU\u00c7\u00c3O AO RABBITMQ + PYTHON 20 de Fevereiro, 2022 - INFORMA\u00c7\u00d5ES B\u00c1SICAS DE DOCKER 17 de Dezembro, 2023 - YES HELLO","title":"Blog"},{"location":"projects/","text":"Update on April 10, 2023 Projects yes-hello mkdocs-simple-blog this-is-python dotfiles python-bigquery-orm Dotflow dotflow [ \ud83c\udfb2 Dotflow turns an idea into flow! ] dotflow-server [ \ud83c\udfb2 Dotflow Server ] I help to maintain django-global-permissions mkdocs-dracula-theme Experiment project-basic-test-sqlalchemy - Experiment project-basic-test-fastapi - Experiment Lesson Content project-django-aws-elastic-beanstalk - Class Project cakeerp-talent-program-2022 - Class Content cakeerp-fastapi - Class Project LinuxProfile linux-profile - [ \ud83d\udc27 Linux Profile Management CLI Tool ] linux-profile-plugin - [ \ud83d\udc27 Plugin Linux Profile ] linux-profile-api - [ \ud83d\udc27 API Linux Profile ] linux-i3 - [\ud83d\udc27 Theme for i3] linux-ui - [\ud83d\udc27 Collection of UI patterns and components] linux-profile-test - Test project, is not updated linux-profile-api-test - Test project, is not updated email-profile email-api IndexOffy tor-network-dataset - [ \ud83d\udc0d Tor-Network - Dataset ] tor-network-api-search - [ \ud83d\udc0d Tor-network - Search API ] tor-network-core - [ \ud83d\udc0d Tor-Network - Scraping URLs ] indexoffy_api - is no longer updated UpyExplorer upy-application - [ \ud83d\ude80 Web Platform ] upy-rabbitmq - [ \ud83d\uddc2 Simple Python Package ] upy-error - [ \ud83d\uddc2 Simple Python Package ] upy-service - is no longer updated upy-process - is no longer updated upy-api - is no longer updated","title":"Projects"},{"location":"projects/#projects","text":"yes-hello mkdocs-simple-blog this-is-python dotfiles python-bigquery-orm","title":"Projects"},{"location":"projects/#dotflow","text":"dotflow [ \ud83c\udfb2 Dotflow turns an idea into flow! ] dotflow-server [ \ud83c\udfb2 Dotflow Server ]","title":"Dotflow"},{"location":"projects/#i-help-to-maintain","text":"django-global-permissions mkdocs-dracula-theme","title":"I help to maintain"},{"location":"projects/#experiment","text":"project-basic-test-sqlalchemy - Experiment project-basic-test-fastapi - Experiment","title":"Experiment"},{"location":"projects/#lesson-content","text":"project-django-aws-elastic-beanstalk - Class Project cakeerp-talent-program-2022 - Class Content cakeerp-fastapi - Class Project","title":"Lesson Content"},{"location":"projects/#linuxprofile","text":"linux-profile - [ \ud83d\udc27 Linux Profile Management CLI Tool ] linux-profile-plugin - [ \ud83d\udc27 Plugin Linux Profile ] linux-profile-api - [ \ud83d\udc27 API Linux Profile ] linux-i3 - [\ud83d\udc27 Theme for i3] linux-ui - [\ud83d\udc27 Collection of UI patterns and components] linux-profile-test - Test project, is not updated linux-profile-api-test - Test project, is not updated email-profile email-api","title":"LinuxProfile"},{"location":"projects/#indexoffy","text":"tor-network-dataset - [ \ud83d\udc0d Tor-Network - Dataset ] tor-network-api-search - [ \ud83d\udc0d Tor-network - Search API ] tor-network-core - [ \ud83d\udc0d Tor-Network - Scraping URLs ] indexoffy_api - is no longer updated","title":"IndexOffy"},{"location":"projects/#upyexplorer","text":"upy-application - [ \ud83d\ude80 Web Platform ] upy-rabbitmq - [ \ud83d\uddc2 Simple Python Package ] upy-error - [ \ud83d\uddc2 Simple Python Package ] upy-service - is no longer updated upy-process - is no longer updated upy-api - is no longer updated","title":"UpyExplorer"},{"location":"writing/","text":"__ de _____ 2023 - POST","title":"Writing"},{"location":"post/2022/02/informacoes-basicas-de-docker/","text":"20 DE FEVEREIRO, 2022 [ #01 ] Introdu\u00e7\u00e3o Docker \u00e9 uma ferramente opensource escrito em GO para gerenciamente e cria\u00e7\u00e3o de containers. Servidor F\u00edsico / M\u00e1quina Virtual / Container Servidor \u00e9 uma m\u00e1quina f\u00edsica qualquer onde voc\u00ea instala um sistema operacional baseado em linux. Quando \u00e9 maquina virtual, voc\u00ea executa um novo sistema operacional dentro do seu sistema operacional que j\u00e1 esta sendo executado na sua maquina f\u00edsica. O container n\u00e3o precisa rodar um novo sistema operacional dentro do sistema operacional da minha maquina f\u00edsica. Quando \u00e9 utilizado uma maquina virtual, ela contem o seu pr\u00f3prio kernel, as suas pr\u00f3prias bibliotecas etc. Em um container n\u00e3o, quando eu estou utilizando o container, somente o processo que eu pedir vai estar em execu\u00e7\u00e3o. As bibliotecas e os binarios, ele compartilha da maquina host. Comandos B\u00e1sicos Faz a listagem dos containers que est\u00e3o ativos no momento. $ sudo docker ps Com o par\u00e2metro -a \u00e9 feito a listagem de todos os containers inativos. sudo docker ps -a Cria um novo container com ubuntu. Pode ser colocado parametros adicionais como a porta que vai ser redirecionado esse container. sudo docker run -i -t -p 8080:80 ubuntu:14.10 Para a execu\u00e7\u00e3o de um container. sudo docker stop CONTAINER_ID Cria uma imagem. O bom \u00e9 sempre realizar o versionamento da imagem criada recentemente. sudo docker commit CONTAINER_ID [qualquer_nome:1.0] Executa comandos dentro do conteiner. sudo docker exec CONTAINER_ID [command] Conecta a um terminal linux dentro do container. sudo docker exec CONTAINER_ID /bin/bash Retorna informa\u00e7\u00f5es sobre determinado container. sudo docker inspect CONTAINER_ID Com esse comando eu consigo ver o quanto o meu container esta consumindo de CPU, mem\u00f3ria RAM e rede. sudo docker stats CONTAINER_ID Diferen\u00e7as Dockerfile Dockerfile configura as imagens para um container. Docker-Compose Docker-compose configura as imagens para os containers e a conex\u00e3o entre eles. Mais informa\u00e7\u00f5es Docker Getting Started Diferen\u00e7a entre o Dockerfile e o Docker-Compose","title":"Informacoes basicas de docker"},{"location":"post/2022/02/informacoes-basicas-de-docker/#introducao","text":"Docker \u00e9 uma ferramente opensource escrito em GO para gerenciamente e cria\u00e7\u00e3o de containers. Servidor F\u00edsico / M\u00e1quina Virtual / Container Servidor \u00e9 uma m\u00e1quina f\u00edsica qualquer onde voc\u00ea instala um sistema operacional baseado em linux. Quando \u00e9 maquina virtual, voc\u00ea executa um novo sistema operacional dentro do seu sistema operacional que j\u00e1 esta sendo executado na sua maquina f\u00edsica. O container n\u00e3o precisa rodar um novo sistema operacional dentro do sistema operacional da minha maquina f\u00edsica. Quando \u00e9 utilizado uma maquina virtual, ela contem o seu pr\u00f3prio kernel, as suas pr\u00f3prias bibliotecas etc. Em um container n\u00e3o, quando eu estou utilizando o container, somente o processo que eu pedir vai estar em execu\u00e7\u00e3o. As bibliotecas e os binarios, ele compartilha da maquina host.","title":"Introdu\u00e7\u00e3o"},{"location":"post/2022/02/informacoes-basicas-de-docker/#comandos-basicos","text":"Faz a listagem dos containers que est\u00e3o ativos no momento. $ sudo docker ps Com o par\u00e2metro -a \u00e9 feito a listagem de todos os containers inativos. sudo docker ps -a Cria um novo container com ubuntu. Pode ser colocado parametros adicionais como a porta que vai ser redirecionado esse container. sudo docker run -i -t -p 8080:80 ubuntu:14.10 Para a execu\u00e7\u00e3o de um container. sudo docker stop CONTAINER_ID Cria uma imagem. O bom \u00e9 sempre realizar o versionamento da imagem criada recentemente. sudo docker commit CONTAINER_ID [qualquer_nome:1.0] Executa comandos dentro do conteiner. sudo docker exec CONTAINER_ID [command] Conecta a um terminal linux dentro do container. sudo docker exec CONTAINER_ID /bin/bash Retorna informa\u00e7\u00f5es sobre determinado container. sudo docker inspect CONTAINER_ID Com esse comando eu consigo ver o quanto o meu container esta consumindo de CPU, mem\u00f3ria RAM e rede. sudo docker stats CONTAINER_ID","title":"Comandos B\u00e1sicos"},{"location":"post/2022/02/informacoes-basicas-de-docker/#diferencas","text":"Dockerfile Dockerfile configura as imagens para um container. Docker-Compose Docker-compose configura as imagens para os containers e a conex\u00e3o entre eles. Mais informa\u00e7\u00f5es Docker Getting Started Diferen\u00e7a entre o Dockerfile e o Docker-Compose","title":"Diferen\u00e7as"},{"location":"post/2022/03/app-python-django-mysql/","text":"02 DE MAR\u00c7O, 2022 [ #03 ] Introdu\u00e7\u00e3o Nesse tutorial vamos nos concentrar nessas cinco tecnologias abaixo para o desenvolvimento do nosso pequeno projeto de teste: Linux Python 3.9 Django 4.0 AWS Elastic Beantalk MySQL 1 \u2014 Estrutura Inicial Cria\u00e7\u00e3o ambiente de desenvolvimento: Vamos come\u00e7ar pelo mais b\u00e1sico de tudo que \u00e9 criar nosso ambiente de desenvolvimento utilizando o virtualenv com os seguintes comandos abaixo. Estou trabalhando com sistema opera\u00e7\u00e3o linux, distribui\u00e7\u00e3o Kubuntu, especificamente Ubuntu vers\u00e3o 21.10. $ mkdir projects $ cd projects $ virtualenv -p python3.9 venv $ source venv/bin/activate Para simplificar e deixar mais organizado eu criei um novo diret\u00f3rio no meu computador chamado projects onde ser\u00e1 colocado o meu novo projeto. Essa etapa se voc\u00ea quiser pode pular e colocar o seu projeto em qualquer lugar. Instala\u00e7\u00e3o dos Requerimentos Esses s\u00e3o os requerimentos b\u00e1sicos para o nosso projeto funcionar tranquilamente. Ap\u00f3s executar a instala\u00e7\u00e3o dos pacotes n\u00e3o se esque\u00e7a de gerar o arquivo de requerimentos do sistema. (env) $ pip install django==4.0 (env) $ pip install django-environ==0.8.1 (env) $ pip install mysqlclient==2.1.0 (env) $ pip install gunicorn==20.1.0 Cria\u00e7\u00e3o Estrutura do Projeto Django (env) $ django-admin startproject application (env) $ cd application (env) $ python manage.py startapp hello Se voc\u00ea chegou at\u00e9 aqui, muito bem! Ent\u00e3o a sua aplica\u00e7\u00e3o dever\u00e1 ter essa estrutura de pastas representadas aqui em baixo. projects/ \u2502 \u251c\u2500\u2500 application/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 application/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u2502 \u251c\u2500\u2500 settings.py \u2502 \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2502 \u2514\u2500\u2500 wsgi.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 hello/ \u2502 \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 admin.py \u2502 \u2502 \u251c\u2500\u2500 apps.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2502 \u2514\u2500\u2500 views..py \u2502 \u251c\u2500\u2500 manage.py \u2502 \u2514\u2500\u2500 vemv/ Nesse ponto, a nossa aplica\u00e7\u00e3o j\u00e1 pode ser executado local, colocando o seguinte comando python manage.py runserver no seu terminal. Como n\u00f3s ainda n\u00e3o realizamos a configura\u00e7\u00e3o do Banco de Dados MySQL , o Django traz configura\u00e7\u00f5es padr\u00e3o para o banco de dados sqlite. Ent\u00e3o ao executar a aplica\u00e7\u00e3o, ser\u00e1 gerado automaticamente um arquivo db.sqlite3 dentro do projeto. Nessa primeira execu\u00e7\u00e3o voc\u00ea ver\u00e1 uma mensagem de alerta em vermelho representado na Imagem-01 . Imagem-01 - Terminal IMAGEM-01 \u2014 Mensagem de alerta: You have 18 unapplied migration(s). You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, > auth, contenttypes, sessions. Run \u2018python manage.py migrate\u2019 to apply them. Esse alerta quer dizer que \u00e0 18 (dezoito) migra\u00e7\u00f5es n\u00e3o aplicadas no seu projeto. Essas migra\u00e7\u00f5es s\u00e3o referente ao painel padr\u00e3o de administra\u00e7\u00e3o do Django . Para testar, podemos executar o comando python manage.py migrate para ser aplicado todas as migra\u00e7\u00f5es de tabelas do painel de controle do Django . Enquanto n\u00e3o configuramos nosso banco MySQL , essas migra\u00e7\u00f5es ser\u00e3o aplicados localmente no nosso banco sqlite . IMAGEM-02 \u2014 P\u00e1gina inicial Django Cria\u00e7\u00e3o das Vari\u00e1veis de Ambiente (Arquivo .env) As vari\u00e1veis de ambiente s\u00e3o uma pe\u00e7a chave para o nosso projeto ser bem estrutura e tamb\u00e9m ter um n\u00edvel b\u00e1sico de seguran\u00e7a. \u00c9 nas nossas vari\u00e1veis de ambiente que ficam guardadas informa\u00e7\u00f5es criticas da aplica\u00e7\u00e3o como por exemplo, acesso ao banco de dados, senhas, chaves privadas. Vamos criar um arquivo .env com as seguintes configura\u00e7\u00f5es: PATH \u2014 /projects/application/.env DJANGO_DEBUG=True DJANGO_ENV=development DJANGO_DATABASE_URL=mysql://USER:PASSWORD@HOST:PORT/NAME DJANGO_SECRET_KEY=key DJANGO_HOST=0.0.0.0 DJANGO_PORT=8080 DJANGO_ALLOWED_HOSTS=localhost DISABLE_COLLECTSTATIC=1 Implementa\u00e7\u00e3o arquivo de Configura\u00e7\u00e3o Django Vamos fazer algumas altera\u00e7\u00f5es no arquivo settings.py para que o projeto fique adequado para deploy em um ambiente de produto\u00e7\u00e3o. Ent\u00e3o abra o arquivo no seu editor de texto preferido e adicione as seguintes linhas: PATH \u2014 /projects/application/application/settings.py import os from pathlib import Path APP_DIR = Path(__file__).resolve().parent.parent.parent BASE_DIR = Path(__file__).resolve().parent.parent CONTENT_DIR = os.path.join(BASE_DIR, 'content') Substitua as variaveis com informa\u00e7\u00f5es sens\u00edveis para buscar esses dados no arquivo .env e n\u00e3o diretamente no c\u00f3digo fonte. SECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\") ALLOWED_HOSTS = [os.getenv(\"DJANGO_ALLOWED_HOSTS\")] Altere as configura\u00e7\u00f5es de templates, adicionando um caminho padr\u00e3o para a aplica\u00e7\u00e3o. TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [ os.path.join(CONTENT_DIR, 'templates'), ], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Gerando StaticFiles Crie um nova pasta dentro do diret\u00f3rio da aplica\u00e7\u00e3o chamado content . Esse ser\u00e1 o local onde estar\u00e1 os nossos arquivos est\u00e1ticos do projeto. PATH \u2014 /projects/application/content PATH \u2014 /projects/application/content/assets (venv) $ cd project/application (venv) $ mkdir content (venv) $ cd content (venv) $ mkdir assets Ap\u00f3s criar a pasta content , volte para o arquivo de configura\u00e7\u00e3o settings.py e fa\u00e7a mais algumas implementa\u00e7\u00f5es. PATH \u2014 /projects/application/application/settings.py STATIC_ROOT = os.path.join(CONTENT_DIR, 'staticfiles') STATIC_URL = '/content/static/' MEDIA_ROOT = os.path.join(CONTENT_DIR, 'media') MEDIA_URL = '/content/media/' STATICFILES_DIRS = [ os.path.join(CONTENT_DIR, 'assets'), ] LOCALE_PATHS = [ os.path.join(CONTENT_DIR, 'locale') ] Se voc\u00ea terminou essa parte, ent\u00e3o j\u00e1 consegue executar o comando para gera\u00e7\u00e3o dos arquivos est\u00e1ticos python manage.py collectstatic . Configura\u00e7\u00e3o Procfile - (Conf AWS) PATH \u2014 /projects/application/Procfile Antes de iniciar adicionar o nosso arquivo de configura\u00e7\u00e3o para AWS, vamos instalar um cara chamado gunicorn com o seguinte comando sudo apt install gunicorn . Gunicorn (\u2018Green Unicorn\u2019) \u00e9 um servidor WSGI para Unix feito em Python puro. Ele n\u00e3o tem deped\u00eancias e \u00e9 f\u00e1cil de instalar e usar. Crie um novo arquivo chamado Procfile no mesmo n\u00edvel em que est\u00e1 o arquivo manage.py e adicione a seguinte linha de c\u00f3digo que est\u00e1 abaixo: web: gunicorn application.wsgi:application --log-file - --log-level debug Gera\u00e7\u00e3o de Requirimentos da aplica\u00e7\u00e3o PATH \u2014 /projects/application/requirements.txt (env) $ pip freeze > requirements.txt 2 \u2014 Banco de Dados Criando um Banco de Dados MySQL Gr\u00e1tis Primeiro acesse o link db4Free para criar uma conta gratuitamente e ter acesso a um banco de dados MySQL para teste. O cadastro \u00e9 bem simples, basta preencher as informa\u00e7\u00f5es b\u00e1sicos do banco como Nome do banco, Nome de usu\u00e1rio, Senha e E-mail. IMAGEM-03 \u2014 P\u00e1gina de Cadastro db4free Ap\u00f3s preencher todas as informa\u00e7\u00f5es \u00e9 s\u00f3 clicar em Cadastre-se e verificar o seu e-mail na sua caixa de entrada. L\u00e1 voc\u00ea receber\u00e1 informa\u00e7\u00f5es adicionais de conex\u00e3o ao banco e de como acessa-lo posteriormente pelo PHPAdmin . IMAGEM-04 \u2014 P\u00e1gina db4free ap\u00f3s a realiza\u00e7\u00e3o do cadastro Configurando Django + MySQL Para realizarmos configura\u00e7\u00e3o da conex\u00e3o do banco de dados MySQL vamos utilizar um pacote chamado dj_database_url . Antes de tudo podemos instalar ele com o comando descrito abaixo e tamb\u00e9m podemos adiciona-lo em nosso arquivo de requerimentos. (env) $ pip install dj-database-url==0.5.0 Ap\u00f3s realizar a instala\u00e7\u00e3o do pacote, vamos editar o arquivo settings.py, para realizar a importa\u00e7\u00e3o de dj_database_url . PATH \u2014 /projects/application/settings.py import dj_database_url E adicionamos tamb\u00e9m esse trecho de c\u00f3digo que realiza a inser\u00e7\u00e3o da URL do banco de dados de acordo com as informa\u00e7\u00f5es que est\u00e3o no nosso arquivo .env no parametro DJANGO_DATABASE_URL . DATABASES = { 'default': dj_database_url.config(default=os.getenv(\"DJANGO_DATABASE_URL\")) } Quando voc\u00ea terminar de adicionar essas configura\u00e7\u00f5es acima, podemos testar novamente a aplica\u00e7\u00e3o executando o comando para realizar as migra\u00e7\u00f5es python manage.py migrate do banco de dados no novo host MySQL . IMAGEM-05 \u2014 Resultado do comando python manage.py migrate. IMAGEM-06 \u2014 Visualiza\u00e7\u00e3o no PHPAdmin das tabelas padr\u00e3o do Django. Show! Agora o nosso projeto django j\u00e1 est\u00e1 com a configura\u00e7\u00e3o b\u00e1sica para funcionar em produ\u00e7\u00e3o. Mais informa\u00e7\u00f5es Github Project","title":"App python django mysql"},{"location":"post/2022/03/app-python-django-mysql/#introducao","text":"Nesse tutorial vamos nos concentrar nessas cinco tecnologias abaixo para o desenvolvimento do nosso pequeno projeto de teste: Linux Python 3.9 Django 4.0 AWS Elastic Beantalk MySQL","title":"Introdu\u00e7\u00e3o"},{"location":"post/2022/03/app-python-django-mysql/#1-estrutura-inicial","text":"","title":"1 \u2014 Estrutura Inicial"},{"location":"post/2022/03/app-python-django-mysql/#criacao-ambiente-de-desenvolvimento","text":"Vamos come\u00e7ar pelo mais b\u00e1sico de tudo que \u00e9 criar nosso ambiente de desenvolvimento utilizando o virtualenv com os seguintes comandos abaixo. Estou trabalhando com sistema opera\u00e7\u00e3o linux, distribui\u00e7\u00e3o Kubuntu, especificamente Ubuntu vers\u00e3o 21.10. $ mkdir projects $ cd projects $ virtualenv -p python3.9 venv $ source venv/bin/activate Para simplificar e deixar mais organizado eu criei um novo diret\u00f3rio no meu computador chamado projects onde ser\u00e1 colocado o meu novo projeto. Essa etapa se voc\u00ea quiser pode pular e colocar o seu projeto em qualquer lugar.","title":"Cria\u00e7\u00e3o ambiente de desenvolvimento:"},{"location":"post/2022/03/app-python-django-mysql/#instalacao-dos-requerimentos","text":"Esses s\u00e3o os requerimentos b\u00e1sicos para o nosso projeto funcionar tranquilamente. Ap\u00f3s executar a instala\u00e7\u00e3o dos pacotes n\u00e3o se esque\u00e7a de gerar o arquivo de requerimentos do sistema. (env) $ pip install django==4.0 (env) $ pip install django-environ==0.8.1 (env) $ pip install mysqlclient==2.1.0 (env) $ pip install gunicorn==20.1.0","title":"Instala\u00e7\u00e3o dos Requerimentos"},{"location":"post/2022/03/app-python-django-mysql/#criacao-estrutura-do-projeto-django","text":"(env) $ django-admin startproject application (env) $ cd application (env) $ python manage.py startapp hello Se voc\u00ea chegou at\u00e9 aqui, muito bem! Ent\u00e3o a sua aplica\u00e7\u00e3o dever\u00e1 ter essa estrutura de pastas representadas aqui em baixo. projects/ \u2502 \u251c\u2500\u2500 application/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 application/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 asgi.py \u2502 \u2502 \u251c\u2500\u2500 settings.py \u2502 \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2502 \u2514\u2500\u2500 wsgi.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 hello/ \u2502 \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 admin.py \u2502 \u2502 \u251c\u2500\u2500 apps.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 tests.py \u2502 \u2502 \u2514\u2500\u2500 views..py \u2502 \u251c\u2500\u2500 manage.py \u2502 \u2514\u2500\u2500 vemv/ Nesse ponto, a nossa aplica\u00e7\u00e3o j\u00e1 pode ser executado local, colocando o seguinte comando python manage.py runserver no seu terminal. Como n\u00f3s ainda n\u00e3o realizamos a configura\u00e7\u00e3o do Banco de Dados MySQL , o Django traz configura\u00e7\u00f5es padr\u00e3o para o banco de dados sqlite. Ent\u00e3o ao executar a aplica\u00e7\u00e3o, ser\u00e1 gerado automaticamente um arquivo db.sqlite3 dentro do projeto. Nessa primeira execu\u00e7\u00e3o voc\u00ea ver\u00e1 uma mensagem de alerta em vermelho representado na Imagem-01 . Imagem-01 - Terminal IMAGEM-01 \u2014 Mensagem de alerta: You have 18 unapplied migration(s). You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, > auth, contenttypes, sessions. Run \u2018python manage.py migrate\u2019 to apply them. Esse alerta quer dizer que \u00e0 18 (dezoito) migra\u00e7\u00f5es n\u00e3o aplicadas no seu projeto. Essas migra\u00e7\u00f5es s\u00e3o referente ao painel padr\u00e3o de administra\u00e7\u00e3o do Django . Para testar, podemos executar o comando python manage.py migrate para ser aplicado todas as migra\u00e7\u00f5es de tabelas do painel de controle do Django . Enquanto n\u00e3o configuramos nosso banco MySQL , essas migra\u00e7\u00f5es ser\u00e3o aplicados localmente no nosso banco sqlite . IMAGEM-02 \u2014 P\u00e1gina inicial Django","title":"Cria\u00e7\u00e3o Estrutura do Projeto Django"},{"location":"post/2022/03/app-python-django-mysql/#criacao-das-variaveis-de-ambiente-arquivo-env","text":"As vari\u00e1veis de ambiente s\u00e3o uma pe\u00e7a chave para o nosso projeto ser bem estrutura e tamb\u00e9m ter um n\u00edvel b\u00e1sico de seguran\u00e7a. \u00c9 nas nossas vari\u00e1veis de ambiente que ficam guardadas informa\u00e7\u00f5es criticas da aplica\u00e7\u00e3o como por exemplo, acesso ao banco de dados, senhas, chaves privadas. Vamos criar um arquivo .env com as seguintes configura\u00e7\u00f5es: PATH \u2014 /projects/application/.env DJANGO_DEBUG=True DJANGO_ENV=development DJANGO_DATABASE_URL=mysql://USER:PASSWORD@HOST:PORT/NAME DJANGO_SECRET_KEY=key DJANGO_HOST=0.0.0.0 DJANGO_PORT=8080 DJANGO_ALLOWED_HOSTS=localhost DISABLE_COLLECTSTATIC=1","title":"Cria\u00e7\u00e3o das Vari\u00e1veis de Ambiente (Arquivo .env)"},{"location":"post/2022/03/app-python-django-mysql/#implementacao-arquivo-de-configuracao-django","text":"Vamos fazer algumas altera\u00e7\u00f5es no arquivo settings.py para que o projeto fique adequado para deploy em um ambiente de produto\u00e7\u00e3o. Ent\u00e3o abra o arquivo no seu editor de texto preferido e adicione as seguintes linhas: PATH \u2014 /projects/application/application/settings.py import os from pathlib import Path APP_DIR = Path(__file__).resolve().parent.parent.parent BASE_DIR = Path(__file__).resolve().parent.parent CONTENT_DIR = os.path.join(BASE_DIR, 'content') Substitua as variaveis com informa\u00e7\u00f5es sens\u00edveis para buscar esses dados no arquivo .env e n\u00e3o diretamente no c\u00f3digo fonte. SECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\") ALLOWED_HOSTS = [os.getenv(\"DJANGO_ALLOWED_HOSTS\")] Altere as configura\u00e7\u00f5es de templates, adicionando um caminho padr\u00e3o para a aplica\u00e7\u00e3o. TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [ os.path.join(CONTENT_DIR, 'templates'), ], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ]","title":"Implementa\u00e7\u00e3o arquivo de Configura\u00e7\u00e3o Django"},{"location":"post/2022/03/app-python-django-mysql/#gerando-staticfiles","text":"Crie um nova pasta dentro do diret\u00f3rio da aplica\u00e7\u00e3o chamado content . Esse ser\u00e1 o local onde estar\u00e1 os nossos arquivos est\u00e1ticos do projeto. PATH \u2014 /projects/application/content PATH \u2014 /projects/application/content/assets (venv) $ cd project/application (venv) $ mkdir content (venv) $ cd content (venv) $ mkdir assets Ap\u00f3s criar a pasta content , volte para o arquivo de configura\u00e7\u00e3o settings.py e fa\u00e7a mais algumas implementa\u00e7\u00f5es. PATH \u2014 /projects/application/application/settings.py STATIC_ROOT = os.path.join(CONTENT_DIR, 'staticfiles') STATIC_URL = '/content/static/' MEDIA_ROOT = os.path.join(CONTENT_DIR, 'media') MEDIA_URL = '/content/media/' STATICFILES_DIRS = [ os.path.join(CONTENT_DIR, 'assets'), ] LOCALE_PATHS = [ os.path.join(CONTENT_DIR, 'locale') ] Se voc\u00ea terminou essa parte, ent\u00e3o j\u00e1 consegue executar o comando para gera\u00e7\u00e3o dos arquivos est\u00e1ticos python manage.py collectstatic .","title":"Gerando StaticFiles"},{"location":"post/2022/03/app-python-django-mysql/#configuracao-procfile-conf-aws","text":"PATH \u2014 /projects/application/Procfile Antes de iniciar adicionar o nosso arquivo de configura\u00e7\u00e3o para AWS, vamos instalar um cara chamado gunicorn com o seguinte comando sudo apt install gunicorn . Gunicorn (\u2018Green Unicorn\u2019) \u00e9 um servidor WSGI para Unix feito em Python puro. Ele n\u00e3o tem deped\u00eancias e \u00e9 f\u00e1cil de instalar e usar. Crie um novo arquivo chamado Procfile no mesmo n\u00edvel em que est\u00e1 o arquivo manage.py e adicione a seguinte linha de c\u00f3digo que est\u00e1 abaixo: web: gunicorn application.wsgi:application --log-file - --log-level debug","title":"Configura\u00e7\u00e3o Procfile - (Conf AWS)"},{"location":"post/2022/03/app-python-django-mysql/#geracao-de-requirimentos-da-aplicacao","text":"PATH \u2014 /projects/application/requirements.txt (env) $ pip freeze > requirements.txt","title":"Gera\u00e7\u00e3o de Requirimentos da aplica\u00e7\u00e3o"},{"location":"post/2022/03/app-python-django-mysql/#2-banco-de-dados","text":"","title":"2 \u2014 Banco de Dados"},{"location":"post/2022/03/app-python-django-mysql/#criando-um-banco-de-dados-mysql-gratis","text":"Primeiro acesse o link db4Free para criar uma conta gratuitamente e ter acesso a um banco de dados MySQL para teste. O cadastro \u00e9 bem simples, basta preencher as informa\u00e7\u00f5es b\u00e1sicos do banco como Nome do banco, Nome de usu\u00e1rio, Senha e E-mail. IMAGEM-03 \u2014 P\u00e1gina de Cadastro db4free Ap\u00f3s preencher todas as informa\u00e7\u00f5es \u00e9 s\u00f3 clicar em Cadastre-se e verificar o seu e-mail na sua caixa de entrada. L\u00e1 voc\u00ea receber\u00e1 informa\u00e7\u00f5es adicionais de conex\u00e3o ao banco e de como acessa-lo posteriormente pelo PHPAdmin . IMAGEM-04 \u2014 P\u00e1gina db4free ap\u00f3s a realiza\u00e7\u00e3o do cadastro","title":"Criando um Banco de Dados MySQL Gr\u00e1tis"},{"location":"post/2022/03/app-python-django-mysql/#configurando-django-mysql","text":"Para realizarmos configura\u00e7\u00e3o da conex\u00e3o do banco de dados MySQL vamos utilizar um pacote chamado dj_database_url . Antes de tudo podemos instalar ele com o comando descrito abaixo e tamb\u00e9m podemos adiciona-lo em nosso arquivo de requerimentos. (env) $ pip install dj-database-url==0.5.0 Ap\u00f3s realizar a instala\u00e7\u00e3o do pacote, vamos editar o arquivo settings.py, para realizar a importa\u00e7\u00e3o de dj_database_url . PATH \u2014 /projects/application/settings.py import dj_database_url E adicionamos tamb\u00e9m esse trecho de c\u00f3digo que realiza a inser\u00e7\u00e3o da URL do banco de dados de acordo com as informa\u00e7\u00f5es que est\u00e3o no nosso arquivo .env no parametro DJANGO_DATABASE_URL . DATABASES = { 'default': dj_database_url.config(default=os.getenv(\"DJANGO_DATABASE_URL\")) } Quando voc\u00ea terminar de adicionar essas configura\u00e7\u00f5es acima, podemos testar novamente a aplica\u00e7\u00e3o executando o comando para realizar as migra\u00e7\u00f5es python manage.py migrate do banco de dados no novo host MySQL . IMAGEM-05 \u2014 Resultado do comando python manage.py migrate. IMAGEM-06 \u2014 Visualiza\u00e7\u00e3o no PHPAdmin das tabelas padr\u00e3o do Django. Show! Agora o nosso projeto django j\u00e1 est\u00e1 com a configura\u00e7\u00e3o b\u00e1sica para funcionar em produ\u00e7\u00e3o. Mais informa\u00e7\u00f5es Github Project","title":"Configurando Django + MySQL"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/","text":"01 DE MAR\u00c7O, 2022 [ #02 ] Introdu\u00e7\u00e3o Este \u00e9 um pequeno review sobre a ferramente de mensageria RabbitMQ. Para entender melhor sobre RabbitMQ primeiro \u00e9 necess\u00e1rio entender o conceito de mensageria que \u00e9 basicamente um modo de comunica\u00e7\u00e3o por meio de troca de mensagens e sendo gerenciados por um \u201cMessage Broker\u201d, termo em ingl\u00eas que define um software que possibilita que aplicativos, sistemas e servi\u00e7os se comuniquem e troquem informa\u00e7\u00f5es. RabbitMQ Na documenta\u00e7\u00e3o oficial do RabbitMQ tem um exemplo muito bom do conceito da ferramenta em si que seria um mediador/gerenciador de mensagens, simples assim. Pense no sistema sendo sendo como uma ag\u00eancia de correios. Quando voc\u00ea coloca uma correspond\u00eancia em uma caixa postal, pode ter certeza de que o carteiro acabar\u00e1 entregando a correspond\u00eancia ao seu destinat\u00e1rio. Nessa simples analogia o RabbitMQ \u00e9 uma caixa postal e tamb\u00e9m a ag\u00eancia de correios que entregar\u00e1 a sua carta. \u201cProducing\u201d / Produzir IMAGEM-01 \u2014 [Producing] \u2014 Produzir Produzing termo que representa o envio de uma mensagem para que o software. Nesse nesse cen\u00e1rio poder\u00edamos chamar esse software de produtor. \u201cQueues\u201d / Fila IMAGEM-02 \u2014 [Queues] \u2014 Filas S\u00e3o nas Queues ou Filas que ficam armazenadas as mensagens enviadas pelo software \u201cprodutor\u201d. Agora estamos falando do que \u00e9 executado dentro do servidor RabbitMQ que pode limitar-se pela sua mem\u00f3ria e tamanho em disco disponibilizado pelo host. \u201cExchanges\u201d / Trocas Exchanges ou Trocas \u00e9 o processo de distribui\u00e7\u00e3o das mensagens para as suas respectivas filas. O direcionamento das mensagens depende do algoritmo de roteamento usado que \u00e9 especificado nas mensagens recebidas. \u201cConsumers\u201d / Consumidores IMAGEM-03 \u2014 [Consumers] \u2014 Consumidores Consumers s\u00e3o uma parte importante do esquema geral da estrutura do RabbitMQ, porque s\u00e3o eles, os \u201cConsumidores\u201d que ir\u00e3o executar determinados processos. \u00c9 nesse momento que o processo descrito na mensagem \u00e9 consumido e processado. Fluxo B\u00e1sico IMAGEM-04 \u2014 Diagrama simplificado do fluxo do RabbitMQ Exemplo em Python Send.py # coding=utf-8 import pika import environ env = environ.Env() environ.Env.read_env() rabbitmq_url = env(\"RABBITMQ_URL\") params = pika.URLParameters(rabbitmq_url) connection = pika.BlockingConnection(params) channel = connection.channel() channel.queue_declare(queue='intro_rabbitmq') channel.basic_publish(exchange='', routing_key='intro_rabbitmq', body='Ola Mundo!') print(\" [x] Enviado 'Ola Mundo!'\") connection.close() Receive.py # coding=utf-8 import pika, sys, os import environ def main(): env = environ.Env() environ.Env.read_env() rabbitmq_url = env(\"RABBITMQ_URL\") params = pika.URLParameters(rabbitmq_url) connection = pika.BlockingConnection(params) channel = connection.channel() channel.queue_declare(queue='intro_rabbitmq') def callback(ch, method, properties, body): print(\" [x] Recebido %r\" % body) channel.basic_consume(queue='intro_rabbitmq', on_message_callback=callback, auto_ack=True) print(' [*] Esperando mensagem. Aperte CTRL+C para sair') channel.start_consuming() if name == 'main': try: main() except KeyboardInterrupt: print('Interrompido') try: sys.exit(0) except SystemExit: os._exit(0) A maior parte deste conte\u00fado foi retirado do site oficial do RabbitMQ, para ter acesso a t\u00f3picos mais complexos acesse www.rabbitmq.com . Mais informa\u00e7\u00f5es Rabbitmq Docs Message brokers Github Gist Source Code - Receive.py Github Gist Source Code - Send.py","title":"Introducao ao rabbitmq python"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#introducao","text":"Este \u00e9 um pequeno review sobre a ferramente de mensageria RabbitMQ. Para entender melhor sobre RabbitMQ primeiro \u00e9 necess\u00e1rio entender o conceito de mensageria que \u00e9 basicamente um modo de comunica\u00e7\u00e3o por meio de troca de mensagens e sendo gerenciados por um \u201cMessage Broker\u201d, termo em ingl\u00eas que define um software que possibilita que aplicativos, sistemas e servi\u00e7os se comuniquem e troquem informa\u00e7\u00f5es.","title":"Introdu\u00e7\u00e3o"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#rabbitmq","text":"Na documenta\u00e7\u00e3o oficial do RabbitMQ tem um exemplo muito bom do conceito da ferramenta em si que seria um mediador/gerenciador de mensagens, simples assim. Pense no sistema sendo sendo como uma ag\u00eancia de correios. Quando voc\u00ea coloca uma correspond\u00eancia em uma caixa postal, pode ter certeza de que o carteiro acabar\u00e1 entregando a correspond\u00eancia ao seu destinat\u00e1rio. Nessa simples analogia o RabbitMQ \u00e9 uma caixa postal e tamb\u00e9m a ag\u00eancia de correios que entregar\u00e1 a sua carta.","title":"RabbitMQ"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#producing-produzir","text":"IMAGEM-01 \u2014 [Producing] \u2014 Produzir Produzing termo que representa o envio de uma mensagem para que o software. Nesse nesse cen\u00e1rio poder\u00edamos chamar esse software de produtor.","title":"\u201cProducing\u201d / Produzir"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#queues-fila","text":"IMAGEM-02 \u2014 [Queues] \u2014 Filas S\u00e3o nas Queues ou Filas que ficam armazenadas as mensagens enviadas pelo software \u201cprodutor\u201d. Agora estamos falando do que \u00e9 executado dentro do servidor RabbitMQ que pode limitar-se pela sua mem\u00f3ria e tamanho em disco disponibilizado pelo host.","title":"\u201cQueues\u201d / Fila"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#exchanges-trocas","text":"Exchanges ou Trocas \u00e9 o processo de distribui\u00e7\u00e3o das mensagens para as suas respectivas filas. O direcionamento das mensagens depende do algoritmo de roteamento usado que \u00e9 especificado nas mensagens recebidas.","title":"\u201cExchanges\u201d / Trocas"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#consumers-consumidores","text":"IMAGEM-03 \u2014 [Consumers] \u2014 Consumidores Consumers s\u00e3o uma parte importante do esquema geral da estrutura do RabbitMQ, porque s\u00e3o eles, os \u201cConsumidores\u201d que ir\u00e3o executar determinados processos. \u00c9 nesse momento que o processo descrito na mensagem \u00e9 consumido e processado.","title":"\u201cConsumers\u201d / Consumidores"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#fluxo-basico","text":"IMAGEM-04 \u2014 Diagrama simplificado do fluxo do RabbitMQ","title":"Fluxo B\u00e1sico"},{"location":"post/2022/03/introducao-ao-rabbitmq-python/#exemplo-em-python","text":"Send.py # coding=utf-8 import pika import environ env = environ.Env() environ.Env.read_env() rabbitmq_url = env(\"RABBITMQ_URL\") params = pika.URLParameters(rabbitmq_url) connection = pika.BlockingConnection(params) channel = connection.channel() channel.queue_declare(queue='intro_rabbitmq') channel.basic_publish(exchange='', routing_key='intro_rabbitmq', body='Ola Mundo!') print(\" [x] Enviado 'Ola Mundo!'\") connection.close() Receive.py # coding=utf-8 import pika, sys, os import environ def main(): env = environ.Env() environ.Env.read_env() rabbitmq_url = env(\"RABBITMQ_URL\") params = pika.URLParameters(rabbitmq_url) connection = pika.BlockingConnection(params) channel = connection.channel() channel.queue_declare(queue='intro_rabbitmq') def callback(ch, method, properties, body): print(\" [x] Recebido %r\" % body) channel.basic_consume(queue='intro_rabbitmq', on_message_callback=callback, auto_ack=True) print(' [*] Esperando mensagem. Aperte CTRL+C para sair') channel.start_consuming() if name == 'main': try: main() except KeyboardInterrupt: print('Interrompido') try: sys.exit(0) except SystemExit: os._exit(0) A maior parte deste conte\u00fado foi retirado do site oficial do RabbitMQ, para ter acesso a t\u00f3picos mais complexos acesse www.rabbitmq.com . Mais informa\u00e7\u00f5es Rabbitmq Docs Message brokers Github Gist Source Code - Receive.py Github Gist Source Code - Send.py","title":"Exemplo em Python"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/","text":"10 DE JULHO, 2022 [ #4 ] Introdu\u00e7\u00e3o Neste artigo n\u00e3o irei me estender muito na parte de configura\u00e7\u00e3o e o processo de deploy na AWS Lambda como um todo, irei apenas dispon\u00edbilizar um script para automatizar esse processo e com certeza deixar tudo mais r\u00e1pido. Para este exemplo iremos utilizar outro servi\u00e7o da AWS chamado Amazon S3 que \u00e9 basicamente um local para armazenamento de arquivos de qualquer tipo. Esse servi\u00e7o dispon\u00edbiliza acesso a 5GB de armazenamento por 12 meses no n\u00edvel gratu\u00edto. \u00c9 no S3 onde iremos realizar o upload do projeto para uso no Lambda. Requerimentos do Sistema sudo apt install zip sudo apt install awscli Zip Package Comprimir nossa aplica\u00e7\u00e3o em um arquivo .ZIP mkdir zip && cp -r app/ zip/app/ && cp -r config.py zip/config.py \\ && cd $venv_dir && zip -r9 \"$root_dir/$file_name\" . \\ && cd \"$root_dir/zip\" && zip -g ../$file_name -r . \\ && cd \"$root_dir\" && rm -r zip Upload S3 Realizar o upload do nosso arquivo .ZIP para o S3. cd $root_dir \\ && aws s3 cp $file_name s3://$bucket_name/$file_name Update Function Lambda Atualizar a fun\u00e7\u00e3o Lambda com a \u00faltima vers\u00e3o. aws lambda update-function-code --function-name $function_name --s3-bucket $bucket_name --s3-key $file_name cd $root_dir rm -r $file_name Modelo B\u00e1sico de Estrutura de API projects/ \u2502 \u251c\u2500\u2500 app/ \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 config.py/ \u2502 \u2514\u2500\u2500 vemv/ Script Completo #!/usr/bin/env bash root_dir=$PWD venv_dir=\"$root_dir/venv/lib/python3.9/site-packages\" function_name=\"app-api-dev\" bucket_name=\"app-api\" file_name=\"app_dev.zip\" # Zip Package mkdir zip && cp -r app/ zip/app/ && cp -r config.py zip/config.py && cd $venv_dir && zip -r9 \"$root_dir/$file_name\" . && cd \"$root_dir/zip\" && zip -g ../$file_name -r . && cd \"$root_dir\" && rm -r zip # Upload S3 cd $root_dir && aws s3 cp $file_name s3://$bucket_name/$file_name # Update Function Lambda aws lambda update-function-code --function-name $function_name --s3-bucket $bucket_name --s3-key $file_name cd $root_dir rm -r $file_name Mais informa\u00e7\u00f5es Github Gist Source Code","title":"Script para deploy de api na aws lambda"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#introducao","text":"Neste artigo n\u00e3o irei me estender muito na parte de configura\u00e7\u00e3o e o processo de deploy na AWS Lambda como um todo, irei apenas dispon\u00edbilizar um script para automatizar esse processo e com certeza deixar tudo mais r\u00e1pido. Para este exemplo iremos utilizar outro servi\u00e7o da AWS chamado Amazon S3 que \u00e9 basicamente um local para armazenamento de arquivos de qualquer tipo. Esse servi\u00e7o dispon\u00edbiliza acesso a 5GB de armazenamento por 12 meses no n\u00edvel gratu\u00edto. \u00c9 no S3 onde iremos realizar o upload do projeto para uso no Lambda. Requerimentos do Sistema sudo apt install zip sudo apt install awscli","title":"Introdu\u00e7\u00e3o"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#zip-package","text":"Comprimir nossa aplica\u00e7\u00e3o em um arquivo .ZIP mkdir zip && cp -r app/ zip/app/ && cp -r config.py zip/config.py \\ && cd $venv_dir && zip -r9 \"$root_dir/$file_name\" . \\ && cd \"$root_dir/zip\" && zip -g ../$file_name -r . \\ && cd \"$root_dir\" && rm -r zip","title":"Zip Package"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#upload-s3","text":"Realizar o upload do nosso arquivo .ZIP para o S3. cd $root_dir \\ && aws s3 cp $file_name s3://$bucket_name/$file_name","title":"Upload S3"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#update-function-lambda","text":"Atualizar a fun\u00e7\u00e3o Lambda com a \u00faltima vers\u00e3o. aws lambda update-function-code --function-name $function_name --s3-bucket $bucket_name --s3-key $file_name cd $root_dir rm -r $file_name","title":"Update Function Lambda"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#modelo-basico-de-estrutura-de-api","text":"projects/ \u2502 \u251c\u2500\u2500 app/ \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 api/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 config.py/ \u2502 \u2514\u2500\u2500 vemv/","title":"Modelo B\u00e1sico de Estrutura de API"},{"location":"post/2022/07/script-para-deploy-de-api-na-aws-lambda/#script-completo","text":"#!/usr/bin/env bash root_dir=$PWD venv_dir=\"$root_dir/venv/lib/python3.9/site-packages\" function_name=\"app-api-dev\" bucket_name=\"app-api\" file_name=\"app_dev.zip\" # Zip Package mkdir zip && cp -r app/ zip/app/ && cp -r config.py zip/config.py && cd $venv_dir && zip -r9 \"$root_dir/$file_name\" . && cd \"$root_dir/zip\" && zip -g ../$file_name -r . && cd \"$root_dir\" && rm -r zip # Upload S3 cd $root_dir && aws s3 cp $file_name s3://$bucket_name/$file_name # Update Function Lambda aws lambda update-function-code --function-name $function_name --s3-bucket $bucket_name --s3-key $file_name cd $root_dir rm -r $file_name Mais informa\u00e7\u00f5es Github Gist Source Code","title":"Script Completo"},{"location":"post/2023/12/yes-hello/","text":"DECEMBER 17, 2023 It's okay to say 'hello' In Chat! 'Time is money', that's a monstrosity. Time is not money, time is the tissue of our life. - Ant\u00f4nio Candido You don\u2019t necessarily need to have a very important topic or question to send a \u2018Hi, How are you?\u2019 to a co-worker on Slack or Discord. No one is so busy that they can't stop for 5 minutes to respond to 'Good Morning' . Today we live in a tired society where everything is very fast and our time is considered money, but this is not the case, not everything is profit. So, take at least a minute to wait and reply \u2018Good morning!\u2019 , it won\u2019t interfere with anything. After that may come an interesting topic or an important question in your busy workday... For example: 9:34 Arthur Dent: Hello Ford, how are you? 9:35 Ford Prefect: Hi, everything is fine! 9:40 Arthur Dent: Ok then :) 9:40 Arthur Dent: I have a question, if you have time. 9:45 Ford Prefect: Sure, what is it?","title":"Yes Hello"},{"location":"post/2023/12/yes-hello/#its-okay-to-say-hello-in-chat","text":"'Time is money', that's a monstrosity. Time is not money, time is the tissue of our life. - Ant\u00f4nio Candido You don\u2019t necessarily need to have a very important topic or question to send a \u2018Hi, How are you?\u2019 to a co-worker on Slack or Discord. No one is so busy that they can't stop for 5 minutes to respond to 'Good Morning' . Today we live in a tired society where everything is very fast and our time is considered money, but this is not the case, not everything is profit. So, take at least a minute to wait and reply \u2018Good morning!\u2019 , it won\u2019t interfere with anything. After that may come an interesting topic or an important question in your busy workday...","title":"It's okay to say 'hello' In Chat!"},{"location":"post/2023/12/yes-hello/#for-example","text":"9:34 Arthur Dent: Hello Ford, how are you? 9:35 Ford Prefect: Hi, everything is fine! 9:40 Arthur Dent: Ok then :) 9:40 Arthur Dent: I have a question, if you have time. 9:45 Ford Prefect: Sure, what is it?","title":"For example:"}]}